#cloud-config

ssh_pwauth: false

write_files:
  - path: /etc/systemd/system/tailscale.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Run Tailscale in Docker
      After=docker.service
      Requires=docker.service

      [Service]
      Restart=always
      RestartSec=5
      ExecStop=/usr/bin/docker stop %n
      ExecStopPost=/usr/bin/docker rm --force %n
      ExecStartPre=-/usr/bin/docker rm --force %n
      ExecStart=/usr/bin/docker run --name=%n \
        --device=/dev/net/tun \
        --cap-add=NET_ADMIN \
        --hostname=%H \
        --env=TS_AUTHKEY=${tailscale_key} \
        --env=TS_ENABLE_METRICS=true \
        --env=TS_STATE_DIR=/var/lib/tailscale \
        --env=TS_USERSPACE=false \
        --volume=/etc/tailscale/state:/var/lib/tailscale \
        tailscale/tailscale:${tailscale_version}

      [Install]
      WantedBy=multi-user.target

  - path: /etc/otelcol/config.yaml
    permissions: 0644
    owner: root
    content: |
      ${indent(6, otel_collector_config)}

  - path: /etc/systemd/system/otel-collector.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Run OTel Collector in Docker
      After=docker.service
      Requires=docker.service
      After=tailscale.service
      Requires=tailscale.service

      [Service]
      Restart=always
      RestartSec=5
      ExecStop=/usr/bin/docker stop %n
      ExecStopPost=/usr/bin/docker rm --force %n
      ExecStartPre=-/usr/bin/docker rm --force %n
      ExecStartPre=/usr/bin/env sh -c '\
        while true; do \
          IP=$(docker exec tailscale.service tailscale ip 2>/dev/null); \
          case "$IP" in \
            "") echo "Waiting for tailscale to report an IP..."; sleep 1 ;; \
            *)  echo "Tailscale IP: $IP. Waiting extra 5 seconds..."; sleep 5; break ;; \
          esac; \
        done'
      ExecStart=/usr/bin/docker run --name=%n \
        --network=container:tailscale.service \
        --volume=/:/hostfs:ro,rslave \
        --volume=/etc/otelcol/config.yaml:/etc/otelcol/config.yaml:ro \
        otel/opentelemetry-collector-k8s:${otel_collector_version} \
          --config=/etc/otelcol/config.yaml

      [Install]
      WantedBy=multi-user.target

  - path: /etc/service-init.sh
    permissions: 0755
    owner: root
    content: |
      #!/usr/bin/env bash
      set -eo pipefail

      # Define services list here
      SERVICES=(
        docker.service
        tailscale.service
        otel-collector.service
      )

      LOG_FILE="/var/log/service-init.log"
      DISCORD_WEBHOOK="${discord_webhook}"
      HOSTNAME="${hostname}"

      notify_success() {
        curl -s -X POST "$DISCORD_WEBHOOK" \
          -F "payload_json={\"content\":\"✅ Service initialization complete on $HOSTNAME\"}"
      }

      notify_failure() {
        curl -s -X POST "$DISCORD_WEBHOOK" \
          -F "file1=@$LOG_FILE;type=text/plain;filename=service-init.log" \
          -F "payload_json={\"content\":\"❌ Service initialization failed on $HOSTNAME. See attached log.\"}"
      }

      trap 'notify_failure' ERR

      check_containers_exist() {
        echo "[*] Checking referenced containers exist..."

        for svc in "$@"; do
          if ! docker ps -a --format '{{.Names}}' | grep -q "^$${svc}$"; then
            echo "  - Container '$svc' not found"
            exit 1
          else
            echo "  - Container '$svc' exists"
          fi
        done
      }

      main() {
        if [ "$#" -lt 1 ]; then
          echo "Usage: main <service1> [service2 ...]"
          exit 1
        fi

        echo "[*] Reloading systemd..."
        systemctl daemon-reexec
        systemctl daemon-reload

        echo "[*] Enabling systemd units..."
        for svc in "$@"; do
          echo "  - Enabling $svc..."
          systemctl enable "$svc"
        done

        echo "[*] Starting services..."
        for svc in "$@"; do
          echo "  - Starting $svc..."
          systemctl start "$svc"
        done

        check_containers_exist "$@"

        echo "[*] All done."
      }

      main "$${SERVICES[@]}" | tee "$LOG_FILE"

      # If we reach here, everything succeeded
      notify_success

  - path: /etc/install-docker.sh
    permissions: 0755
    owner: root
    content: |
      #!/usr/bin/env bash
      set -eo pipefail

      LOG_FILE="/var/log/install-docker.log"
      DISCORD_WEBHOOK="${discord_webhook}"
      HOSTNAME="${hostname}"

      notify_success() {
        curl -s -X POST "$DISCORD_WEBHOOK" \
          -F "payload_json={\"content\":\"✅ Docker installation complete on $HOSTNAME\"}"
      }

      notify_failure() {
        curl -s -X POST "$DISCORD_WEBHOOK" \
          -F "file1=@$LOG_FILE;type=text/plain;filename=service-init.log" \
          -F "payload_json={\"content\":\"❌ Docker installation failed on $HOSTNAME. See attached log.\"}"
      }

      trap 'notify_failure' ERR

      main() {
        export DEBIAN_FRONTEND=noninteractive

        echo "[*] Updating system packages..."
        apt-get update

        echo "[*] Installing required packages (ca-certificates, curl)..."
        apt-get install -y ca-certificates curl

        echo "[*] Creating /etc/apt/keyrings directory..."
        install -m 0755 -d /etc/apt/keyrings

        echo "[*] Adding Docker's official GPG key..."
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc

        echo "[*] Setting permissions on GPG key..."
        chmod a+r /etc/apt/keyrings/docker.asc

        echo "[*] Adding Docker repository to APT sources..."
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
          tee /etc/apt/sources.list.d/docker.list > /dev/null

        echo "[*] Updating package list after adding Docker repo..."
        apt-get update

        echo "[*] Installing docker packages..."
        apt-get install --assume-yes \
          docker-ce docker-ce-cli \
          docker-buildx-plugin docker-compose-plugin \
          containerd.io

        echo "[*] All done."
      }

      main | tee "$LOG_FILE"

      # If we reach here, everything succeeded
      notify_success

runcmd:
  - /etc/install-docker.sh
  - /etc/service-init.sh
