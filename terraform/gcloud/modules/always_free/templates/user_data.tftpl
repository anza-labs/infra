#cloud-config

write_files:
  - path: /etc/systemd/system/tailscale.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Run Tailscale in Docker
      After=docker.service
      Requires=docker.service

      [Service]
      Restart=always
      RestartSec=5
      ExecStop=/usr/bin/docker stop %n
      ExecStopPost=/usr/bin/docker rm --force %n
      ExecStartPre=-/usr/bin/docker rm --force %n
      ExecStart=/usr/bin/docker run --name=%n \
        --device=/dev/net/tun \
        --cap-add=NET_ADMIN \
        --network=host \
        --env=TS_AUTHKEY=${tailscale_key} \
        --env=TS_STATE_DIR=/var/lib/tailscale \
        --env=TS_USERSPACE=false \
        --volume=/etc/tailscale/state:/var/lib/tailscale \
        tailscale/tailscale:${tailscale_version}

      [Install]
      WantedBy=multi-user.target

  - path: /etc/k3s-init.sh
    permissions: 0755
    owner: root
    content: |
      #!/usr/bin/env bash
      set -eo pipefail

      # Define services list here
      SERVICES=(
        tailscale.service
      )

      LOG_FILE="/var/log/k3s-init.log"
      DISCORD_WEBHOOK="${discord_webhook}"
      HOSTNAME="${hostname}"

      notify_success() {
        curl -s -X POST "$DISCORD_WEBHOOK" \
          -F "file1=@/etc/rancher/k3s/k3s.yaml;type=text/yaml;filename=kubeconfig.yaml" \
          -F "payload_json={\"content\":\"üì¶ K3s kubeconfig from $HOSTNAME\"}"
      }

      notify_failure() {
        curl -s -X POST "$DISCORD_WEBHOOK" \
          -F "file1=@$LOG_FILE;type=text/plain;filename=k3s-init.log" \
          -F "payload_json={\"content\":\"‚ùå K3s initialization failed on $HOSTNAME. See attached log.\"}"
      }

      trap 'notify_failure' ERR

      main() {
        if [ "$#" -lt 1 ]; then
          echo "Usage: main <service1> [service2 ...]"
          exit 1
        fi

        echo "[*] Reloading systemd..."
        systemctl daemon-reexec
        systemctl daemon-reload

        echo "[*] Enabling systemd units..."
        for svc in "$@"; do
          echo "  - Enabling $svc..."
          systemctl enable "$svc"
        done

        echo "[*] Starting services..."
        for svc in "$@"; do
          echo "  - Starting $svc..."
          systemctl start "$svc"
        done

        echo "[*] Waiting for kubeconfig..."
        for i in $(seq 1 30); do
          [ -f /etc/rancher/k3s/k3s.yaml ] && break
          sleep 2
        done

        if [ ! -f /etc/rancher/k3s/k3s.yaml ]; then
          echo "k3s.yaml not found!"
          exit 1
        fi

        echo "[*] All done."
      }

      main "${SERVICES[@]}" | tee "$LOG_FILE"

      # If we reach here, everything succeeded
      notify_success

runcmd:
  - /etc/k3s-init.sh
