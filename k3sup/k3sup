#!/usr/bin/env bash

set -euo pipefail

K3SUP="${K3SUP:-k3sup}"

MACHINE_IP="${1:-}"
REMOTE_USER="${REMOTE_USER:-shared}"
SSH_KEY="${SSH_KEY:-${HOME}/.ssh/shared}"

BWS_PROJECT_ID="${BWS_PROJECT_ID:-}"
K8S_BITWARDEN_TOKEN_ID="${K8S_BITWARDEN_TOKEN_ID:-}"
K8S_DISCORD_WEBHOOK_ID="${K8S_DISCORD_WEBHOOK_ID:-}"
K8S_GITHUB_TOKEN_ID="${K8S_GITHUB_TOKEN_ID:-}"

# Flags (all enabled by default)
INSTALL=true
SECRETS=true
FLUX=true

# Parse flags
for arg in "$@"; do
  case "$arg" in
    --no-install) INSTALL=false ;;
    --no-secrets) SECRETS=false ;;
    --no-flux) FLUX=false ;;
    --help|-h)
      echo "Usage: $0 [IP] [--no-install] [--no-secrets] [--no-flux]"
      exit 0
      ;;
  esac
done

if [[ -z "$MACHINE_IP" ]]; then
  echo "[!] Error: MACHINE_IP is required as first argument"
  exit 1
fi

function install_k3s() {
  echo "[*] Installing k3s on ${MACHINE_IP} using k3sup..."
  $K3SUP install \
    --ip="${MACHINE_IP}" \
    --user="${REMOTE_USER}" \
    --ssh-key="${SSH_KEY}" \
    --k3s-extra-args='--disable=servicelb,traefik' \
    --local-path=./k3sup.conf

  echo "[*] Waiting for k3s to become ready..."
  $K3SUP ready \
    --kubeconfig=./k3sup.conf \
    --pause 5s
}

function store_kubeconfig() {
  echo "[*] Checking if Bitwarden secret for kubeconfig exists..."
  local secret_id
  secret_id="$(bws secret list | jq -r '.[] | select(.key | match("kubeconfig \\(k3sup\\)")) | .id')"

  if [[ -z "$secret_id" ]]; then
    echo "[*] Creating new Bitwarden secret for kubeconfig..."
    bws secret create "kubeconfig (k3sup)" "$(cat ./k3sup.conf)" "${BWS_PROJECT_ID}"
  else
    echo "[*] Updating existing Bitwarden secret for kubeconfig..."
    bws secret edit \
      --key "kubeconfig (k3sup)" \
      --value "$(cat ./k3sup.conf)" \
      --project-id "${BWS_PROJECT_ID}" \
      "${secret_id}"
  fi
}

function create_k8s_secrets() {
  echo "[*] Retrieving Bitwarden token..."
  local bw_token
  bw_token="$(bws secret get "${K8S_BITWARDEN_TOKEN_ID}" | jq -r '.value')"

  echo "[*] Retrieving Discord webhook URL..."
  local discord_webhook
  discord_webhook="$(bws secret get "${K8S_DISCORD_WEBHOOK_ID}" | jq -r '.value')"

  echo "[*] Creating Kubernetes secret for Bitwarden token..."
  kubectl create secret generic \
    --namespace=kube-system bitwarden \
    --from-literal=token="${bw_token}"

  echo "[*] Creating Kubernetes secret for Discord webhook..."
  kubectl create secret generic \
    --namespace=flux-system discord-webhook \
    --from-literal=address="${discord_webhook}"
}

function bootstrap_flux() {
  echo "[*] Retrieving GitHub token..."
  local github_token
  github_token="$(bws secret get "${K8S_GITHUB_TOKEN_ID}" | jq -r '.value')"

  echo "[*] Bootstrapping Flux..."
  flux bootstrap git \
    --force \
    --password="${github_token}" \
    --with-bearer-token \
    --kubeconfig=./k3sup.conf \
    --url=https://github.com/anza-labs/infra.git \
    --path=flux/clusters/k3sup
}

# Run stages
$INSTALL && install_k3s
$SECRETS && store_kubeconfig && create_k8s_secrets
$FLUX && bootstrap_flux

echo "[*] Script execution complete."
